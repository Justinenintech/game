<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="响应时间图" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ConnectTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Connect Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="true">
        <stringProp name="CounterConfig.start">10000</stringProp>
        <stringProp name="CounterConfig.end">10999</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">numb</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="服务器地址" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">sit_gateway.fy.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="TestPlan.comments">sit_gateway.fy.com、gateway.test966.com</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="55126294">timestamp</stringProp>
          <stringProp name="1904812937">public_key</stringProp>
          <stringProp name="-1068855134">mobile</stringProp>
          <stringProp name="-1314264214">mobile_code</stringProp>
          <stringProp name="-1504168605">invite_code</stringProp>
          <stringProp name="111421">pwd</stringProp>
          <stringProp name="-1704470201">fuli_groupId</stringProp>
          <stringProp name="-874425782">saolei_groupId</stringProp>
          <stringProp name="-218966917">niuniu_groupId</stringProp>
          <stringProp name="1714408142">jinqiang_groupId</stringProp>
          <stringProp name="-1560055040">qiangzhuangniu_groupId</stringProp>
          <stringProp name="-1726739590">erbagang_groupId</stringProp>
          <stringProp name="-37564611">jielong_groupId</stringProp>
          <stringProp name="647701705">errenniuniu_groupId</stringProp>
          <stringProp name="1550962648">runtime</stringProp>
          <stringProp name="827431776">send_sleep</stringProp>
          <stringProp name="-1793182940">grab_sleep</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="-1006080254">
            <stringProp name="-811840068">${__time(,)}</stringProp>
            <stringProp name="-60642083">${public_key}</stringProp>
            <stringProp name="-1983271379">101010${numb}</stringProp>
            <stringProp name="1513445">1688</stringProp>
            <stringProp name="-2133659183">${invite_code}</stringProp>
            <stringProp name="1449589344">111111</stringProp>
            <stringProp name="1511430">1458</stringProp>
            <stringProp name="1511453">1460</stringProp>
            <stringProp name="1511455">1462</stringProp>
            <stringProp name="1511457">1464</stringProp>
            <stringProp name="1511459">1466</stringProp>
            <stringProp name="1511461">1468</stringProp>
            <stringProp name="1511484">1470</stringProp>
            <stringProp name="1511486">1472</stringProp>
            <stringProp name="1958013297">1000000</stringProp>
            <stringProp name="46730161">10000</stringProp>
            <stringProp name="48625">100</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">1767、1688</stringProp>
      </UserParameters>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="压测配置" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">压测用户总数</stringProp>
          </elementProp>
          <elementProp name="first" elementType="Argument">
            <stringProp name="Argument.name">first</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">启动第一个线程之前需要等待N秒</stringProp>
          </elementProp>
          <elementProp name="start" elementType="Argument">
            <stringProp name="Argument.name">start</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">最开始启动N个线程</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="add" elementType="Argument">
            <stringProp name="Argument.name">add</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">递增数量</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="add_every" elementType="Argument">
            <stringProp name="Argument.name">add_every</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">每隔多少秒递增</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="using" elementType="Argument">
            <stringProp name="Argument.name">using</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.desc">在时间范围内完成递增</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="running" elementType="Argument">
            <stringProp name="Argument.name">running</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.desc">达到最大用户数后持续运行多少时间</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stop" elementType="Argument">
            <stringProp name="Argument.name">stop</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">停止线程数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stop_every" elementType="Argument">
            <stringProp name="Argument.name">stop_every</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">每隔多少秒停止</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="1千账号充值百万" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="【登录商户后台】" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${sit_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">admin</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">${sit_token}</stringProp>
          </HeaderManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1216985755">password</stringProp>
              <stringProp name="-877336406">tenant</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="-827554194">randomStr</stringProp>
              <stringProp name="849926269">grant_type</stringProp>
              <stringProp name="109264468">scope</stringProp>
              <stringProp name="-265713450">username</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="769633744">
                <stringProp name="-1363902793">1sHqYPOwcihu8ouLqiArnQ==</stringProp>
                <stringProp name="1448635039">100000</stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="-905826493">server</stringProp>
                <stringProp name="92668751">admin</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">randomStr是记录缓存的，可以不传或者空</stringProp>
          </UserParameters>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录商户后台" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">sit_manager.fy.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/auth/oauth/token?username=${username}&amp;password=${password}&amp;tenant=${tenant}&amp;code=${code}&amp;grant_type=${grant_type}&amp;scope=${scope}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sit_token提取" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sit_token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">faild</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__setProperty(sit_token,${sit_token},)};</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="批量充值" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${sit_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">admin</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">${sit_token}</stringProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1千账号批量充百万" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;adjustAmount&quot;:&quot;1000000&quot;,&quot;adjustItem&quot;:3,&quot;adjustItemName&quot;:&quot;其他&quot;,&quot;userIds&quot;:[&quot;15803&quot;,&quot;15805&quot;,&quot;15807&quot;,&quot;15809&quot;,&quot;15811&quot;,&quot;15813&quot;,&quot;15815&quot;,&quot;15817&quot;,&quot;15819&quot;,&quot;15821&quot;,&quot;15823&quot;,&quot;15825&quot;,&quot;15827&quot;,&quot;15829&quot;,&quot;15831&quot;,&quot;15833&quot;,&quot;15835&quot;,&quot;15837&quot;,&quot;15839&quot;,&quot;15841&quot;,&quot;15843&quot;,&quot;15845&quot;,&quot;15847&quot;,&quot;15849&quot;,&quot;15851&quot;,&quot;15853&quot;,&quot;15855&quot;,&quot;15857&quot;,&quot;15859&quot;,&quot;15861&quot;,&quot;15863&quot;,&quot;15865&quot;,&quot;15867&quot;,&quot;15869&quot;,&quot;15871&quot;,&quot;15873&quot;,&quot;15875&quot;,&quot;15877&quot;,&quot;15879&quot;,&quot;15881&quot;,&quot;15883&quot;,&quot;15885&quot;,&quot;15887&quot;,&quot;15889&quot;,&quot;15891&quot;,&quot;15893&quot;,&quot;15895&quot;,&quot;15897&quot;,&quot;15899&quot;,&quot;15901&quot;,&quot;15903&quot;,&quot;15905&quot;,&quot;15907&quot;,&quot;15909&quot;,&quot;15911&quot;,&quot;15913&quot;,&quot;15915&quot;,&quot;15917&quot;,&quot;15919&quot;,&quot;15921&quot;,&quot;15923&quot;,&quot;15925&quot;,&quot;15927&quot;,&quot;15929&quot;,&quot;15931&quot;,&quot;15933&quot;,&quot;15935&quot;,&quot;15937&quot;,&quot;15939&quot;,&quot;15941&quot;,&quot;15943&quot;,&quot;15945&quot;,&quot;15947&quot;,&quot;15949&quot;,&quot;15951&quot;,&quot;15953&quot;,&quot;15955&quot;,&quot;15957&quot;,&quot;15959&quot;,&quot;15961&quot;,&quot;15963&quot;,&quot;15965&quot;,&quot;15967&quot;,&quot;15969&quot;,&quot;15971&quot;,&quot;15973&quot;,&quot;15975&quot;,&quot;15977&quot;,&quot;15979&quot;,&quot;15981&quot;,&quot;15983&quot;,&quot;15985&quot;,&quot;15987&quot;,&quot;15989&quot;,&quot;15991&quot;,&quot;15993&quot;,&quot;15995&quot;,&quot;15997&quot;,&quot;15999&quot;,&quot;16001&quot;,&quot;16003&quot;,&quot;16005&quot;,&quot;16007&quot;,&quot;16009&quot;,&quot;16011&quot;,&quot;16013&quot;,&quot;16015&quot;,&quot;16017&quot;,&quot;16019&quot;,&quot;16021&quot;,&quot;16023&quot;,&quot;16025&quot;,&quot;16027&quot;,&quot;16029&quot;,&quot;16031&quot;,&quot;16033&quot;,&quot;16035&quot;,&quot;16037&quot;,&quot;16039&quot;,&quot;16041&quot;,&quot;16043&quot;,&quot;16045&quot;,&quot;16047&quot;,&quot;16049&quot;,&quot;16051&quot;,&quot;16053&quot;,&quot;16055&quot;,&quot;16057&quot;,&quot;16059&quot;,&quot;16061&quot;,&quot;16063&quot;,&quot;16065&quot;,&quot;16067&quot;,&quot;16069&quot;,&quot;16071&quot;,&quot;16073&quot;,&quot;16075&quot;,&quot;16077&quot;,&quot;16079&quot;,&quot;16081&quot;,&quot;16083&quot;,&quot;16085&quot;,&quot;16087&quot;,&quot;16089&quot;,&quot;16091&quot;,&quot;16093&quot;,&quot;16095&quot;,&quot;16097&quot;,&quot;16099&quot;,&quot;16101&quot;,&quot;16103&quot;,&quot;16105&quot;,&quot;16107&quot;,&quot;16109&quot;,&quot;16111&quot;,&quot;16113&quot;,&quot;16115&quot;,&quot;16117&quot;,&quot;16119&quot;,&quot;16121&quot;,&quot;16123&quot;,&quot;16125&quot;,&quot;16127&quot;,&quot;16129&quot;,&quot;16131&quot;,&quot;16133&quot;,&quot;16135&quot;,&quot;16137&quot;,&quot;16139&quot;,&quot;16141&quot;,&quot;16143&quot;,&quot;16145&quot;,&quot;16147&quot;,&quot;16149&quot;,&quot;16151&quot;,&quot;16153&quot;,&quot;16155&quot;,&quot;16157&quot;,&quot;16159&quot;,&quot;16161&quot;,&quot;16163&quot;,&quot;16165&quot;,&quot;16167&quot;,&quot;16169&quot;,&quot;16171&quot;,&quot;16173&quot;,&quot;16175&quot;,&quot;16177&quot;,&quot;16179&quot;,&quot;16181&quot;,&quot;16183&quot;,&quot;16185&quot;,&quot;16187&quot;,&quot;16189&quot;,&quot;16191&quot;,&quot;16193&quot;,&quot;16195&quot;,&quot;16197&quot;,&quot;16199&quot;,&quot;16201&quot;,&quot;16203&quot;,&quot;16205&quot;,&quot;16207&quot;,&quot;16209&quot;,&quot;16211&quot;,&quot;16213&quot;,&quot;16215&quot;,&quot;16217&quot;,&quot;16219&quot;,&quot;16221&quot;,&quot;16223&quot;,&quot;16225&quot;,&quot;16227&quot;,&quot;16229&quot;,&quot;16231&quot;,&quot;16233&quot;,&quot;16235&quot;,&quot;16237&quot;,&quot;16239&quot;,&quot;16241&quot;,&quot;16243&quot;,&quot;16245&quot;,&quot;16247&quot;,&quot;16249&quot;,&quot;16251&quot;,&quot;16253&quot;,&quot;16255&quot;,&quot;16257&quot;,&quot;16259&quot;,&quot;16261&quot;,&quot;16263&quot;,&quot;16265&quot;,&quot;16267&quot;,&quot;16269&quot;,&quot;16271&quot;,&quot;16273&quot;,&quot;16275&quot;,&quot;16277&quot;,&quot;16279&quot;,&quot;16281&quot;,&quot;16283&quot;,&quot;16285&quot;,&quot;16287&quot;,&quot;16289&quot;,&quot;16291&quot;,&quot;16293&quot;,&quot;16295&quot;,&quot;16297&quot;,&quot;16299&quot;,&quot;16301&quot;,&quot;16303&quot;,&quot;16305&quot;,&quot;16307&quot;,&quot;16309&quot;,&quot;16311&quot;,&quot;16313&quot;,&quot;16315&quot;,&quot;16317&quot;,&quot;16319&quot;,&quot;16321&quot;,&quot;16323&quot;,&quot;16325&quot;,&quot;16327&quot;,&quot;16329&quot;,&quot;16331&quot;,&quot;16333&quot;,&quot;16335&quot;,&quot;16337&quot;,&quot;16339&quot;,&quot;16341&quot;,&quot;16343&quot;,&quot;16345&quot;,&quot;16347&quot;,&quot;16349&quot;,&quot;16351&quot;,&quot;16353&quot;,&quot;16355&quot;,&quot;16357&quot;,&quot;16359&quot;,&quot;16361&quot;,&quot;16363&quot;,&quot;16365&quot;,&quot;16367&quot;,&quot;16369&quot;,&quot;16371&quot;,&quot;16373&quot;,&quot;16375&quot;,&quot;16377&quot;,&quot;16379&quot;,&quot;16381&quot;,&quot;16383&quot;,&quot;16385&quot;,&quot;16387&quot;,&quot;16389&quot;,&quot;16391&quot;,&quot;16393&quot;,&quot;16395&quot;,&quot;16397&quot;,&quot;16399&quot;,&quot;16401&quot;,&quot;16403&quot;,&quot;16405&quot;,&quot;16407&quot;,&quot;16409&quot;,&quot;16411&quot;,&quot;16413&quot;,&quot;16415&quot;,&quot;16417&quot;,&quot;16419&quot;,&quot;16421&quot;,&quot;16423&quot;,&quot;16425&quot;,&quot;16427&quot;,&quot;16429&quot;,&quot;16431&quot;,&quot;16433&quot;,&quot;16435&quot;,&quot;16437&quot;,&quot;16439&quot;,&quot;16441&quot;,&quot;16443&quot;,&quot;16445&quot;,&quot;16447&quot;,&quot;16449&quot;,&quot;16451&quot;,&quot;16453&quot;,&quot;16455&quot;,&quot;16457&quot;,&quot;16459&quot;,&quot;16461&quot;,&quot;16463&quot;,&quot;16465&quot;,&quot;16467&quot;,&quot;16469&quot;,&quot;16471&quot;,&quot;16473&quot;,&quot;16475&quot;,&quot;16477&quot;,&quot;16479&quot;,&quot;16481&quot;,&quot;16483&quot;,&quot;16485&quot;,&quot;16487&quot;,&quot;16489&quot;,&quot;16491&quot;,&quot;16493&quot;,&quot;16495&quot;,&quot;16497&quot;,&quot;16499&quot;,&quot;16501&quot;,&quot;16503&quot;,&quot;16505&quot;,&quot;16507&quot;,&quot;16509&quot;,&quot;16511&quot;,&quot;16513&quot;,&quot;16515&quot;,&quot;16517&quot;,&quot;16519&quot;,&quot;16521&quot;,&quot;16523&quot;,&quot;16525&quot;,&quot;16527&quot;,&quot;16529&quot;,&quot;16531&quot;,&quot;16533&quot;,&quot;16535&quot;,&quot;16537&quot;,&quot;16539&quot;,&quot;16541&quot;,&quot;16543&quot;,&quot;16545&quot;,&quot;16547&quot;,&quot;16549&quot;,&quot;16551&quot;,&quot;16553&quot;,&quot;16555&quot;,&quot;16557&quot;,&quot;16559&quot;,&quot;16561&quot;,&quot;16563&quot;,&quot;16565&quot;,&quot;16567&quot;,&quot;16569&quot;,&quot;16571&quot;,&quot;16573&quot;,&quot;16575&quot;,&quot;16577&quot;,&quot;16579&quot;,&quot;16581&quot;,&quot;16583&quot;,&quot;16585&quot;,&quot;16587&quot;,&quot;16589&quot;,&quot;16591&quot;,&quot;16593&quot;,&quot;16595&quot;,&quot;16597&quot;,&quot;16599&quot;,&quot;16601&quot;,&quot;16603&quot;,&quot;16605&quot;,&quot;16607&quot;,&quot;16609&quot;,&quot;16611&quot;,&quot;16613&quot;,&quot;16615&quot;,&quot;16617&quot;,&quot;16619&quot;,&quot;16621&quot;,&quot;16623&quot;,&quot;16625&quot;,&quot;16627&quot;,&quot;16629&quot;,&quot;16631&quot;,&quot;16633&quot;,&quot;16635&quot;,&quot;16637&quot;,&quot;16639&quot;,&quot;16641&quot;,&quot;16643&quot;,&quot;16645&quot;,&quot;16647&quot;,&quot;16649&quot;,&quot;16651&quot;,&quot;16653&quot;,&quot;16655&quot;,&quot;16657&quot;,&quot;16659&quot;,&quot;16661&quot;,&quot;16663&quot;,&quot;16665&quot;,&quot;16667&quot;,&quot;16669&quot;,&quot;16671&quot;,&quot;16673&quot;,&quot;16675&quot;,&quot;16677&quot;,&quot;16679&quot;,&quot;16681&quot;,&quot;16683&quot;,&quot;16685&quot;,&quot;16687&quot;,&quot;16689&quot;,&quot;16691&quot;,&quot;16693&quot;,&quot;16695&quot;,&quot;16697&quot;,&quot;16699&quot;,&quot;16701&quot;,&quot;16703&quot;,&quot;16705&quot;,&quot;16707&quot;,&quot;16709&quot;,&quot;16711&quot;,&quot;16713&quot;,&quot;16715&quot;,&quot;16717&quot;,&quot;16719&quot;,&quot;16721&quot;,&quot;16723&quot;,&quot;16725&quot;,&quot;16727&quot;,&quot;16729&quot;,&quot;16731&quot;,&quot;16733&quot;,&quot;16735&quot;,&quot;16737&quot;,&quot;16739&quot;,&quot;16741&quot;,&quot;16743&quot;,&quot;16745&quot;,&quot;16747&quot;,&quot;16749&quot;,&quot;16751&quot;,&quot;16753&quot;,&quot;16755&quot;,&quot;16757&quot;,&quot;16759&quot;,&quot;16761&quot;,&quot;16763&quot;,&quot;16765&quot;,&quot;16767&quot;,&quot;16769&quot;,&quot;16771&quot;,&quot;16773&quot;,&quot;16775&quot;,&quot;16777&quot;,&quot;16779&quot;,&quot;16781&quot;,&quot;16783&quot;,&quot;16785&quot;,&quot;16787&quot;,&quot;16789&quot;,&quot;16791&quot;,&quot;16793&quot;,&quot;16795&quot;,&quot;16797&quot;,&quot;16799&quot;,&quot;16801&quot;,&quot;16803&quot;,&quot;16805&quot;,&quot;16807&quot;,&quot;16809&quot;,&quot;16811&quot;,&quot;16813&quot;,&quot;16815&quot;,&quot;16817&quot;,&quot;16819&quot;,&quot;16821&quot;,&quot;16823&quot;,&quot;16825&quot;,&quot;16827&quot;,&quot;16829&quot;,&quot;16831&quot;,&quot;16833&quot;,&quot;16835&quot;,&quot;16837&quot;,&quot;16839&quot;,&quot;16841&quot;,&quot;16843&quot;,&quot;16845&quot;,&quot;16847&quot;,&quot;16849&quot;,&quot;16851&quot;,&quot;16853&quot;,&quot;16855&quot;,&quot;16857&quot;,&quot;16859&quot;,&quot;16861&quot;,&quot;16863&quot;,&quot;16865&quot;,&quot;16867&quot;,&quot;16869&quot;,&quot;16871&quot;,&quot;16873&quot;,&quot;16875&quot;,&quot;16877&quot;,&quot;16879&quot;,&quot;16881&quot;,&quot;16883&quot;,&quot;16885&quot;,&quot;16887&quot;,&quot;16889&quot;,&quot;16891&quot;,&quot;16893&quot;,&quot;16895&quot;,&quot;16897&quot;,&quot;16899&quot;,&quot;16901&quot;,&quot;16903&quot;,&quot;16905&quot;,&quot;16907&quot;,&quot;16909&quot;,&quot;16911&quot;,&quot;16913&quot;,&quot;16915&quot;,&quot;16917&quot;,&quot;16919&quot;,&quot;16921&quot;,&quot;16923&quot;,&quot;16925&quot;,&quot;16927&quot;,&quot;16929&quot;,&quot;16931&quot;,&quot;16933&quot;,&quot;16935&quot;,&quot;16937&quot;,&quot;16939&quot;,&quot;16941&quot;,&quot;16943&quot;,&quot;16945&quot;,&quot;16947&quot;,&quot;16949&quot;,&quot;16951&quot;,&quot;16953&quot;,&quot;16955&quot;,&quot;16957&quot;,&quot;16959&quot;,&quot;16961&quot;,&quot;16963&quot;,&quot;16965&quot;,&quot;16967&quot;,&quot;16969&quot;,&quot;16971&quot;,&quot;16973&quot;,&quot;16975&quot;,&quot;16977&quot;,&quot;16979&quot;,&quot;16981&quot;,&quot;16983&quot;,&quot;16985&quot;,&quot;16987&quot;,&quot;16989&quot;,&quot;16991&quot;,&quot;16993&quot;,&quot;16995&quot;,&quot;16997&quot;,&quot;16999&quot;,&quot;17001&quot;,&quot;17003&quot;,&quot;17005&quot;,&quot;17007&quot;,&quot;17009&quot;,&quot;17011&quot;,&quot;17013&quot;,&quot;17015&quot;,&quot;17017&quot;,&quot;17019&quot;,&quot;17021&quot;,&quot;17023&quot;,&quot;17025&quot;,&quot;17027&quot;,&quot;17029&quot;,&quot;17031&quot;,&quot;17033&quot;,&quot;17035&quot;,&quot;17037&quot;,&quot;17039&quot;,&quot;17041&quot;,&quot;17043&quot;,&quot;17045&quot;,&quot;17047&quot;,&quot;17049&quot;,&quot;17051&quot;,&quot;17053&quot;,&quot;17055&quot;,&quot;17057&quot;,&quot;17059&quot;,&quot;17061&quot;,&quot;17063&quot;,&quot;17065&quot;,&quot;17067&quot;,&quot;17069&quot;,&quot;17071&quot;,&quot;17073&quot;,&quot;17075&quot;,&quot;17077&quot;,&quot;17079&quot;,&quot;17081&quot;,&quot;17083&quot;,&quot;17085&quot;,&quot;17087&quot;,&quot;17089&quot;,&quot;17091&quot;,&quot;17093&quot;,&quot;17095&quot;,&quot;17097&quot;,&quot;17099&quot;,&quot;17101&quot;,&quot;17103&quot;,&quot;17105&quot;,&quot;17107&quot;,&quot;17109&quot;,&quot;17111&quot;,&quot;17113&quot;,&quot;17115&quot;,&quot;17117&quot;,&quot;17119&quot;,&quot;17121&quot;,&quot;17123&quot;,&quot;17125&quot;,&quot;17127&quot;,&quot;17129&quot;,&quot;17131&quot;,&quot;17133&quot;,&quot;17135&quot;,&quot;17137&quot;,&quot;17139&quot;,&quot;17141&quot;,&quot;17143&quot;,&quot;17145&quot;,&quot;17147&quot;,&quot;17149&quot;,&quot;17151&quot;,&quot;17153&quot;,&quot;17155&quot;,&quot;17157&quot;,&quot;17159&quot;,&quot;17161&quot;,&quot;17163&quot;,&quot;17165&quot;,&quot;17167&quot;,&quot;17169&quot;,&quot;17171&quot;,&quot;17173&quot;,&quot;17175&quot;,&quot;17177&quot;,&quot;17179&quot;,&quot;17181&quot;,&quot;17183&quot;,&quot;17185&quot;,&quot;17187&quot;,&quot;17189&quot;,&quot;17191&quot;,&quot;17193&quot;,&quot;17195&quot;,&quot;17197&quot;,&quot;17199&quot;,&quot;17201&quot;,&quot;17203&quot;,&quot;17205&quot;,&quot;17207&quot;,&quot;17209&quot;,&quot;17211&quot;,&quot;17213&quot;,&quot;17215&quot;,&quot;17217&quot;,&quot;17219&quot;,&quot;17221&quot;,&quot;17223&quot;,&quot;17225&quot;,&quot;17227&quot;,&quot;17229&quot;,&quot;17231&quot;,&quot;17233&quot;,&quot;17235&quot;,&quot;17237&quot;,&quot;17239&quot;,&quot;17241&quot;,&quot;17243&quot;,&quot;17245&quot;,&quot;17247&quot;,&quot;17249&quot;,&quot;17251&quot;,&quot;17253&quot;,&quot;17255&quot;,&quot;17257&quot;,&quot;17259&quot;,&quot;17261&quot;,&quot;17263&quot;,&quot;17265&quot;,&quot;17267&quot;,&quot;17269&quot;,&quot;17271&quot;,&quot;17273&quot;,&quot;17275&quot;,&quot;17277&quot;,&quot;17279&quot;,&quot;17281&quot;,&quot;17283&quot;,&quot;17285&quot;,&quot;17287&quot;,&quot;17289&quot;,&quot;17291&quot;,&quot;17293&quot;,&quot;17295&quot;,&quot;17297&quot;,&quot;17299&quot;,&quot;17301&quot;,&quot;17303&quot;,&quot;17305&quot;,&quot;17307&quot;,&quot;17309&quot;,&quot;17311&quot;,&quot;17313&quot;,&quot;17315&quot;,&quot;17317&quot;,&quot;17319&quot;,&quot;17321&quot;,&quot;17323&quot;,&quot;17325&quot;,&quot;17327&quot;,&quot;17329&quot;,&quot;17331&quot;,&quot;17333&quot;,&quot;17335&quot;,&quot;17337&quot;,&quot;17339&quot;,&quot;17341&quot;,&quot;17343&quot;,&quot;17345&quot;,&quot;17347&quot;,&quot;17349&quot;,&quot;17351&quot;,&quot;17353&quot;,&quot;17355&quot;,&quot;17357&quot;,&quot;17359&quot;,&quot;17361&quot;,&quot;17363&quot;,&quot;17365&quot;,&quot;17367&quot;,&quot;17369&quot;,&quot;17371&quot;,&quot;17373&quot;,&quot;17375&quot;,&quot;17377&quot;,&quot;17379&quot;,&quot;17381&quot;,&quot;17383&quot;,&quot;17385&quot;,&quot;17387&quot;,&quot;17389&quot;,&quot;17391&quot;,&quot;17393&quot;,&quot;17395&quot;,&quot;17397&quot;,&quot;17399&quot;,&quot;17401&quot;,&quot;17403&quot;,&quot;17405&quot;,&quot;17407&quot;,&quot;17409&quot;,&quot;17411&quot;,&quot;17413&quot;,&quot;17415&quot;,&quot;17417&quot;,&quot;17419&quot;,&quot;17421&quot;,&quot;17423&quot;,&quot;17425&quot;,&quot;17427&quot;,&quot;17429&quot;,&quot;17431&quot;,&quot;17433&quot;,&quot;17435&quot;,&quot;17437&quot;,&quot;17439&quot;,&quot;17441&quot;,&quot;17443&quot;,&quot;17445&quot;,&quot;17447&quot;,&quot;17449&quot;,&quot;17451&quot;,&quot;17453&quot;,&quot;17455&quot;,&quot;17457&quot;,&quot;17459&quot;,&quot;17461&quot;,&quot;17463&quot;,&quot;17465&quot;,&quot;17467&quot;,&quot;17469&quot;,&quot;17471&quot;,&quot;17473&quot;,&quot;17475&quot;,&quot;17477&quot;,&quot;17479&quot;,&quot;17481&quot;,&quot;17483&quot;,&quot;17485&quot;,&quot;17487&quot;,&quot;17489&quot;,&quot;17491&quot;,&quot;17493&quot;,&quot;17495&quot;,&quot;17497&quot;,&quot;17499&quot;,&quot;17501&quot;,&quot;17503&quot;,&quot;17505&quot;,&quot;17507&quot;,&quot;17509&quot;,&quot;17511&quot;,&quot;17513&quot;,&quot;17515&quot;,&quot;17517&quot;,&quot;17519&quot;,&quot;17521&quot;,&quot;17523&quot;,&quot;17525&quot;,&quot;17527&quot;,&quot;17529&quot;,&quot;17531&quot;,&quot;17533&quot;,&quot;17535&quot;,&quot;17537&quot;,&quot;17539&quot;,&quot;17541&quot;,&quot;17543&quot;,&quot;17545&quot;,&quot;17547&quot;,&quot;17549&quot;,&quot;17551&quot;,&quot;17553&quot;,&quot;17555&quot;,&quot;17557&quot;,&quot;17559&quot;,&quot;17561&quot;,&quot;17563&quot;,&quot;17565&quot;,&quot;17567&quot;,&quot;17569&quot;,&quot;17571&quot;,&quot;17573&quot;,&quot;17575&quot;,&quot;17577&quot;,&quot;17579&quot;,&quot;17581&quot;,&quot;17583&quot;,&quot;17585&quot;,&quot;17587&quot;,&quot;17589&quot;,&quot;17591&quot;,&quot;17593&quot;,&quot;17595&quot;,&quot;17597&quot;,&quot;17599&quot;,&quot;17601&quot;,&quot;17603&quot;,&quot;17605&quot;,&quot;17607&quot;,&quot;17609&quot;,&quot;17611&quot;,&quot;17613&quot;,&quot;17615&quot;,&quot;17617&quot;,&quot;17619&quot;,&quot;17621&quot;,&quot;17623&quot;,&quot;17625&quot;,&quot;17627&quot;,&quot;17629&quot;,&quot;17631&quot;,&quot;17633&quot;,&quot;17635&quot;,&quot;17637&quot;,&quot;17639&quot;,&quot;17641&quot;,&quot;17643&quot;,&quot;17645&quot;,&quot;17647&quot;,&quot;17649&quot;,&quot;17651&quot;,&quot;17653&quot;,&quot;17655&quot;,&quot;17657&quot;,&quot;17659&quot;,&quot;17661&quot;,&quot;17663&quot;,&quot;17665&quot;,&quot;17667&quot;,&quot;17669&quot;,&quot;17671&quot;,&quot;17673&quot;,&quot;17675&quot;,&quot;17677&quot;,&quot;17679&quot;,&quot;17681&quot;,&quot;17683&quot;,&quot;17685&quot;,&quot;17687&quot;,&quot;17689&quot;,&quot;17691&quot;,&quot;17693&quot;,&quot;17695&quot;,&quot;17697&quot;,&quot;17699&quot;,&quot;17701&quot;,&quot;17703&quot;,&quot;17705&quot;,&quot;17707&quot;,&quot;17709&quot;,&quot;17711&quot;,&quot;17713&quot;,&quot;17715&quot;,&quot;17717&quot;,&quot;17719&quot;,&quot;17721&quot;,&quot;17723&quot;,&quot;17725&quot;,&quot;17727&quot;,&quot;17729&quot;,&quot;17731&quot;,&quot;17733&quot;,&quot;17735&quot;,&quot;17737&quot;,&quot;17739&quot;,&quot;17741&quot;,&quot;17743&quot;,&quot;17745&quot;,&quot;17747&quot;,&quot;17749&quot;,&quot;17751&quot;,&quot;17753&quot;,&quot;17755&quot;,&quot;17757&quot;,&quot;17759&quot;,&quot;17761&quot;,&quot;17763&quot;,&quot;17765&quot;,&quot;17767&quot;,&quot;17769&quot;,&quot;17771&quot;,&quot;17773&quot;,&quot;17775&quot;,&quot;17777&quot;,&quot;17779&quot;,&quot;17781&quot;,&quot;17783&quot;,&quot;17785&quot;,&quot;17787&quot;,&quot;17789&quot;,&quot;17791&quot;,&quot;17793&quot;,&quot;17795&quot;,&quot;17797&quot;,&quot;17799&quot;,&quot;17801&quot;],&quot;remark&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">sit_manager.fy.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/bms/systemFinance/adjust</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-福利发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="福利发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="福利-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="福利-进群${fuli_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-2038774944">
                    <stringProp name="1620844984">{\&quot;id\&quot;:${fuli_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="福利-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/redpacket/send</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">300</stringProp>
                <stringProp name="minimumValue">10</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="count" enabled="true">
                <stringProp name="maximumValue">100</stringProp>
                <stringProp name="minimumValue">1</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">count</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1717210932">
                    <stringProp name="912660485">{\&quot;count\&quot;:\&quot;${count}\&quot;,\&quot;groupId\&quot;:\&quot;${fuli_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;type\&quot;:0,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-扫雷发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="扫雷发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="扫雷-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="扫雷-进群${saolei_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-354908976">
                    <stringProp name="-1102245803">{\&quot;id\&quot;:${saolei_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="扫雷-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/redpacket/send</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">300</stringProp>
                <stringProp name="minimumValue">10</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="bombNum" enabled="true">
                <stringProp name="maximumValue">9</stringProp>
                <stringProp name="minimumValue">0</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">bombNum</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="count" enabled="true">
                <stringProp name="maximumValue">10</stringProp>
                <stringProp name="minimumValue">10</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">count</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1780584673">
                    <stringProp name="-703626358">{\&quot;count\&quot;:\&quot;${count}\&quot;,\&quot;ext\&quot;:{\&quot;bombNum\&quot;:\&quot;${bombNum}\&quot;},\&quot;groupId\&quot;:\&quot;${saolei_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;type\&quot;:1,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="packetId_${numb}" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">packetId_${numb}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-牛牛发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="牛牛发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="牛牛-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="牛牛-进群${niuniu_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="133723138">
                    <stringProp name="70878916">{\&quot;id\&quot;:${niuniu_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="牛牛-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/redpacket/send</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">300</stringProp>
                <stringProp name="minimumValue">10</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="count" enabled="true">
                <stringProp name="maximumValue">10</stringProp>
                <stringProp name="minimumValue">3</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">count</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1417019217">
                    <stringProp name="-603405485">{\&quot;count\&quot;:\&quot;${count}\&quot;,\&quot;groupId\&quot;:\&quot;${niuniu_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;type\&quot;:2,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-禁抢发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="禁抢发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="禁抢-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="禁抢-进群${jinqiang_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1989434870">
                    <stringProp name="459962897">{\&quot;id\&quot;:${jinqiang_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="禁抢-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/redpacket/send</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">300</stringProp>
                <stringProp name="minimumValue">10</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int[] a1= {5,6,7,9,10};
Random r = new Random();
a2 = a1[r.nextInt(4)];
String a11=&quot;&quot;;
for (int i=0;i&lt;a2;i++){
	a3 = r.nextInt(10);
	String a33 = String.valueOf(a3);
	boolean status = a11.contains(a33);
	if(status){
	 break;
	}else{
	 a11=a11.concat(a33+&quot;,&quot;);
	}
}
a11 = a11.substring(0, a11.length() - 1);
System.out.println(a11);
vars.put(&quot;bombList&quot;,a11);
String a2 = String.valueOf(a2);
vars.put(&quot;count&quot;,a2);

if (a2==&quot;6&quot;){
	String type=&quot;2&quot;;
	vars.put(&quot;type&quot;,type);
}else{
	String type=&quot;1&quot;;
	vars.put(&quot;type&quot;,type);
}

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="2060940154">
                    <stringProp name="1819538452">{\&quot;count\&quot;:\&quot;${count}\&quot;,\&quot;ext\&quot;:{\&quot;bombList\&quot;:\&quot;[${bombList}]\&quot;,\&quot;type\&quot;:\&quot;${type}\&quot;},\&quot;groupId\&quot;:\&quot;${jinqiang_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;type\&quot;:3,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
                <stringProp name="TestPlan.comments">6不中是type2{&quot;count&quot;:&quot;6&quot;,&quot;ext&quot;:{&quot;bombList&quot;:&quot;[5,0]&quot;,&quot;type&quot;:&quot;2&quot;}</stringProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="823019341">&quot;alterMsg&quot;:&quot;不能</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-抢庄牛发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="抢庄牛发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢庄牛-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢庄牛-进群${qiangzhuangniu_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="2111616184">
                    <stringProp name="91397215">{\&quot;id\&quot;:${qiangzhuangniu_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢庄牛-抢庄" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/robBankeer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">9000</stringProp>
                <stringProp name="minimumValue">1000</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="291863089">
                    <stringProp name="1610290841">{\&quot;chatId\&quot;:\&quot;${qiangzhuangniu_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="574210255">&quot;alterMsg&quot;:&quot;当期抢庄已结束&quot;</stringProp>
                  <stringProp name="468233749">&quot;msg&quot;:&quot;最</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢庄牛-连庄" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/continueBanker</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1890110320">
                    <stringProp name="-739290273">{\&quot;chatId\&quot;:\&quot;${qiangzhuangniu_groupId}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="823149801">&quot;alterMsg&quot;:&quot;当期</stringProp>
                  <stringProp name="468233749">&quot;msg&quot;:&quot;最</stringProp>
                  <stringProp name="-1695167137">&quot;alterMsg&quot;:&quot;未参与本期游戏&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢庄牛-投注" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/bett</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">500</stringProp>
                <stringProp name="minimumValue">100</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="176781053">
                    <stringProp name="602267111">{\&quot;betAttr\&quot;:\&quot;\&quot;,\&quot;chatId\&quot;:\&quot;${qiangzhuangniu_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
                <stringProp name="TestPlan.comments">{&quot;betAttr&quot;:&quot;&quot;,&quot;chatId&quot;:&quot;${qiangzhuangniu_groupId}&quot;,&quot;money&quot;:&quot;${money}&quot;,&quot;userId&quot;:${userId}}</stringProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="-690684640">&quot;alterMsg&quot;:&quot;当期投注已结束&quot;</stringProp>
                  <stringProp name="468233749">&quot;msg&quot;:&quot;最</stringProp>
                  <stringProp name="-1671883088">&quot;alterMsg&quot;:&quot;庄家不需要投注&quot;</stringProp>
                  <stringProp name="-1695167137">&quot;alterMsg&quot;:&quot;未参与本期游戏&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢庄牛-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/sendRedpacket</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1890110320">
                    <stringProp name="-739290273">{\&quot;chatId\&quot;:\&quot;${qiangzhuangniu_groupId}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="711165833">&quot;msg&quot;:&quot;发包时间结束</stringProp>
                  <stringProp name="-1695167137">&quot;alterMsg&quot;:&quot;未参与本期游戏&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-28杠发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="28杠发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28杠-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28杠-进群${erbagang_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1382093671">
                    <stringProp name="797416677">{\&quot;id\&quot;:${erbagang_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28杠-抢庄" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/robBankeer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">9000</stringProp>
                <stringProp name="minimumValue">1000</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-359006991">
                    <stringProp name="1888912595">{\&quot;chatId\&quot;:\&quot;${erbagang_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="574210255">&quot;alterMsg&quot;:&quot;当期抢庄已结束&quot;</stringProp>
                  <stringProp name="468233749">&quot;msg&quot;:&quot;最</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28杠-连庄" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/continueBanker</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="473269711">
                    <stringProp name="-690954651">{\&quot;chatId\&quot;:\&quot;${erbagang_groupId}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="823149801">&quot;alterMsg&quot;:&quot;当期</stringProp>
                  <stringProp name="468233749">&quot;msg&quot;:&quot;最</stringProp>
                  <stringProp name="-1695167137">&quot;alterMsg&quot;:&quot;未参与本期游戏&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28杠-投注" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/bett</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">500</stringProp>
                <stringProp name="minimumValue">100</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-374808652">
                    <stringProp name="281304737">{\&quot;betAttr\&quot;:\&quot;\&quot;,\&quot;chatId\&quot;:\&quot;${erbagang_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
                <stringProp name="TestPlan.comments">{&quot;betAttr&quot;:&quot;&quot;,&quot;chatId&quot;:&quot;${qiangzhuangniu_groupId}&quot;,&quot;money&quot;:&quot;${money}&quot;,&quot;userId&quot;:${userId}}</stringProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="-690684640">&quot;alterMsg&quot;:&quot;当期投注已结束&quot;</stringProp>
                  <stringProp name="468233749">&quot;msg&quot;:&quot;最</stringProp>
                  <stringProp name="-1671883088">&quot;alterMsg&quot;:&quot;庄家不需要投注&quot;</stringProp>
                  <stringProp name="-1695167137">&quot;alterMsg&quot;:&quot;未参与本期游戏&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28杠-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/rabniuniu/sendRedpacket</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="473269711">
                    <stringProp name="-690954651">{\&quot;chatId\&quot;:\&quot;${erbagang_groupId}\&quot;,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="711165833">&quot;msg&quot;:&quot;发包时间结束</stringProp>
                  <stringProp name="-1695167137">&quot;alterMsg&quot;:&quot;未参与本期游戏&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="压测-二人牛发包" enabled="false">
        <stringProp name="TestPlan.comments">This group will start 100 threads：设置线程组启动的线程总数为100个；
First,wait for N seconds：启动第一个线程之前，需要等待N秒；
Then start N threads：设置最开始时启动N个线程；
Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：接下来，每30秒添加10个线程，在5秒的时间段；
Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；
Finally,stop 5 threads every 1 seconds：最后，每1秒停止5个线程；</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="Threads initial delay">${first}</stringProp>
        <stringProp name="Start users count">${add}</stringProp>
        <stringProp name="Start users count burst">${start}</stringProp>
        <stringProp name="Start users period">${add_every}</stringProp>
        <stringProp name="Stop users count">${stop}</stringProp>
        <stringProp name="Stop users period">${stop_every}</stringProp>
        <stringProp name="flighttime">${running}</stringProp>
        <stringProp name="rampUp">${using}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="同步定时器" enabled="true">
          <stringProp name="groupSize">${threads}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="二人牛发包" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">userName</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2人牛-登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-995380578">passwd</stringProp>
                  <stringProp name="-1314264214">mobile_code</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1764012265">
                    <stringProp name="-1341709807">q111111</stringProp>
                    <stringProp name="1513445">1688</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">faild</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="进群" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2人牛-进群${errenniuniu_groupId}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/social/skChatGroup/join</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3267882">join</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="178238145">
                    <stringProp name="-990803724">{\&quot;id\&quot;:${errenniuniu_groupId},\&quot;pwd\&quot;:\&quot;${pwd}\&quot;}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${join}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="不断发包" enabled="true">
            <stringProp name="RunTime.seconds">${runtime}</stringProp>
          </RunTime>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2人牛-发包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/redpacket/send</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="money" enabled="true">
                <stringProp name="maximumValue">300</stringProp>
                <stringProp name="minimumValue">10</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">money</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3526536">send</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="602099536">
                    <stringProp name="695287258">{\&quot;count\&quot;:\&quot;2\&quot;,\&quot;groupId\&quot;:\&quot;${errenniuniu_groupId}\&quot;,\&quot;money\&quot;:\&quot;${money}\&quot;,\&quot;type\&quot;:8,\&quot;userId\&quot;:${userId}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${send}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="1527425776">&quot;alterMsg&quot;:&quot;未加入群组&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">${send_sleep}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="im" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenant</stringProp>
                <stringProp name="Header.value">100000</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">type</stringProp>
                <stringProp name="Header.value">APP</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userName</stringProp>
                <stringProp name="Header.value">${mobile}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="福利-登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;passwd&quot;:&quot;${passwd_aes}&quot;,&#xd;
	&quot;mobile&quot;:&quot;${mobile}&quot;,&#xd;
	&quot;mobile_code&quot;:&quot;${mobile_code}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/auth/nauth/mobile/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-995380578">passwd</stringProp>
                <stringProp name="-1314264214">mobile_code</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1764012265">
                  <stringProp name="-1341709807">q111111</stringProp>
                  <stringProp name="1513445">1688</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

String AES_KEY=&quot;1234567887654321&quot;;
String passwd=&quot;${passwd}&quot;;
String passwd_aes = AesUtils.encrypt(passwd,AES_KEY);
vars.put(&quot;passwd_aes&quot;,passwd_aes);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token提取" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">faild</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="public_key提取器" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">public_key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.public_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId提取器" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String token=&quot;${token}&quot;;
String token_im= token.replaceAll(&quot;\\\+&quot;,&quot;%2B&quot;);
vars.put(&quot;token_im&quot;,token_im);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="im连接" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server">10.10.95.141</stringProp>
            <stringProp name="port">18888</stringProp>
            <stringProp name="path">?token=${token_im}&amp;deviceType=2</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
          <hashTree/>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime控制器" enabled="true">
          <stringProp name="RunTime.seconds">200</stringProp>
        </RunTime>
        <hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="监听返回" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">60000</stringProp>
            <boolProp name="optional">false</boolProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON提取器" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">packetId_im_content</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.content</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell 后置处理程序" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.regex.*;

//String newJson = &quot;${packetId_im_content}&quot;;


//String strq=&quot;{&quot;a&quot;:23,&quot;b&quot;:12345678,&quot;c&quot;:12}&quot;;
System.out.println(strq);
String str = strq.replaceAll(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
System.out.println(str);
String packetId_im = &quot;&quot;;
Pattern p = Pattern.compile(&quot;\\d{8}&quot;);
Matcher m = p.matcher(str);
packetId_im = m.find() ? m.group():null;
System.out.println(str);
System.out.println(packetId_im);
vars.put(&quot;packetId_im&quot;,packetId_im);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">${packetId_im}!=&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抢包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;encryptData&quot;:&quot;${cs_aes}\n&quot;,&#xd;
	&quot;encryptKey&quot;:&quot;${cond}\n&quot;,&#xd;
	&quot;timestamp&quot;:${timestamp}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/redpacket/redpacket/grab</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3181132">grab</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="196600943">
                    <stringProp name="-1646832999">{\&quot;packetId\&quot;: ${packetId_im}}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import cn.ishoping.encrypt.AesUtils;

RsaTools2 rsaTools = new RsaTools2();
String public_key = &quot;${public_key}&quot;;
String AES_KEY=&quot;1234567887654321&quot;;
String cleartext=&quot;${grab}&quot;;
String cs_aes = AesUtils.encrypt(cleartext,AES_KEY);
String cond = rsaTools.encrypt(AES_KEY,public_key);
vars.put(&quot;cs_aes&quot;,cs_aes);
vars.put(&quot;cond&quot;,cond);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-999492280">&quot;msg&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">登录失败咯</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="调试取样器" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
